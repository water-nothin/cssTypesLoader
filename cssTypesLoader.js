const fs = require('fs');
const path = require('path');

const bannerMessage =
  '/* eslint-disable */\n// This file is automatically generated.\n// Please do not change this file!';

const cssModuleExport =
  'export const cssExports: CssExports;\nexport default cssExports;\n';

const makeFileHandlers = (filename) => ({
  read: (handler) => fs.readFile(filename, { encoding: 'utf-8' }, handler),
  write: (content, handler) =>
    fs.writeFile(filename, content, { encoding: 'utf-8' }, handler),
});

const cssModuleToInterface = (cssModuleKeys) => {
  const interfaceFields = cssModuleKeys
    .sort()
    .map((key) => `  '${key}': string;`)
    .join('\n');

  return `interface CssExports {\n${interfaceFields}\n}`;
};

const extractLocalExports = (content) => {
  let localExports = content.split('exports.locals')[1];
  if (!localExports) {
    localExports = content.split('___CSS_LOADER_EXPORT___.locals')[1];
  }
  return localExports;
};

const makeDoneHandlers = (callback, content, rest) => ({
  failed: (e) => callback(e),
  success: () => callback(null, content, ...rest),
});

const enforceLFLineSeparators = (text) => {
  if (text) {
    // replace all CRLFs (Windows) by LFs (Unix)
    return text.replace(/\r\n/g, '\n');
  }
  return text;

};

const compareText = (contentA, contentB) => (
  enforceLFLineSeparators(contentA) === enforceLFLineSeparators(contentB)
);

module.exports = function (content, ...rest) {
  const { failed, success } = makeDoneHandlers(this.async(), content, rest);

  const filename = this.resourcePath;
  // const { mode = 'emit' } = loaderUtils.getOptions(this) || {};

  const filenameToTypingsFilename = (filename) => {
    const dirName = path.dirname(filename);
    const baseName = path.basename(filename);
    return path.join(dirName, `${baseName}.d.ts`);
  };

  const cssModuleInterfaceFilename = filenameToTypingsFilename(filename);

  if (cssModuleInterfaceFilename.includes('node_modules')) {
    success();
    return;
  }

  const keyRegex = /"([^\\"]+)":/g;

  let match;
  const cssModuleKeys = [];

  const localExports = extractLocalExports(content);

  while ((match = keyRegex.exec(localExports))) {
    if (cssModuleKeys.indexOf(match[1]) < 0) {
      cssModuleKeys.push(match[1]);
    }
  }

  const { read, write } = makeFileHandlers(cssModuleInterfaceFilename);

  const cssModuleDefinition = `${bannerMessage}\n${cssModuleToInterface(
    cssModuleKeys,
  )}\n${cssModuleExport}`;

  read((_, fileContents) => {
    if (!compareText(cssModuleDefinition, fileContents)) {
      write(cssModuleDefinition, (err) => {
        if (err) {
          failed(err);
        } else {
          success();
        }
      });
    } else {
      success();
    }
  });
};
